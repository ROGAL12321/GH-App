{"version":3,"sources":["styles/theme.tsx","styles/global.tsx","styles/grid.tsx","styles/layout.tsx","common/Header.styled.tsx","apollo.tsx","helpers/url.tsx","helpers/storage.tsx","hooks/useGithub.tsx","styles/typo.tsx","styles/buttons.tsx","common/Header.tsx","layouts/main.tsx","styles/form.tsx","pages/Search/index.tsx","consts/urls.tsx","pages/Results/Results.styled.tsx","styles/icons.tsx","queries/index.tsx","common/Loader.tsx","pages/Results/index.tsx","pages/Details/Details.styled.tsx","pages/Details/index.tsx","pages/App/index.tsx","router.tsx","serviceWorker.ts","index.tsx","assets/arrow.svg"],"names":["mainTheme","siteWidth","colorMain","colorSecondary","fontColorMain","fontColorSecondary","fontColorThird","fontSizeSmall","fontSizeMedium","fontSizeLarge","fontWeightMedium","fontWeightBold","Global","createGlobalStyle","reset","Container","styled","div","props","theme","Layout","Header","header","HeaderContainer","createClient","token","ApolloClient","uri","headers","Authorization","cache","InMemoryCache","getUrlParameter","url","name","replace","results","RegExp","exec","decodeURIComponent","setItem","key","value","storageHelper","useGithub","createStore","useState","searchName","setSearchName","apolloClient","setApolloClient","errors","setErrors","fetching","setFetching","saveAccessToken","data","search","a","authorize","window","location","href","process","initApolloClient","code","tokenValue","getItem","axios","method","params","client_id","client_secret","then","catch","cors","getAccessToken","logout","H1","h1","H2","h2","secondary","centered","H3","h3","Tag","small","p","ButtonContainer","position","PrimaryButton","button","disabled","HeaderComponent","to","onClick","MainLayout","children","InputRow","Input","input","Label","label","Search","history","match","useFormState","formState","text","query","values","onSubmit","ev","preventDefault","push","required","type","ListItem","li","Description","ListItemContainer","img","big","IconBack","GET_REPOSITORIES","gql","REPOSITORY_INFO","LoaderWrapper","LoaderComponent","color","height","width","timeout","Results","useQuery","variables","loading","error","Loader","nodes","length","src","ArrowIcon","alt","map","id","description","primaryLanguage","owner","stargazers","avatarUrl","sx","margin","borderRadius","login","totalCount","DetailItem","Detail","span","DetailComponent","repository","mt","App","useEffect","client","exact","path","component","Details","Router","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.3028f3a9.chunk.js","sourcesContent":["const mainTheme = {\n  siteWidth: '680px',\n  colorMain: '#3f51b5',\n  colorSecondary: '#F94983',\n  fontColorMain: '#000',\n  fontColorSecondary: '#fff',\n  fontColorThird: '#666',\n  fontSizeSmall: '14px',\n  fontSizeMedium: '16px',\n  fontSizeLarge: '20px',\n  fontWeightMedium: '500',\n  fontWeightBold: '700',\n}\n\nexport const breakpoints = {\n  desktop: 992,\n  tablet: 768,\n  mobile: 576\n}\n\nexport default mainTheme\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nconst Global = createGlobalStyle`\n  ${reset}\n\n  body {\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #EEE;\n    letter-spacing: 0.1px;\n    line-height: 1.6;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default Global;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: ${props => props.theme.siteWidth};\n  padding: 0 1.25em;\n  margin: 0 auto;\n`\n","import styled from 'styled-components';\n\nconst Layout = styled.div`\n  box-shadow:\n    0 2px 4px -1px rgba(0,0,0,.2),\n    0 4px 5px 0 rgba(0,0,0,.14),\n    0 1px 10px 0 rgba(0,0,0,.12);\n  color: ${props => props.theme.fontColorMain};\n  padding: 1.5em;\n  max-width: ${props => props.theme.siteWidth};\n  box-sizing: border-box;\n  margin: 40px auto;\n  background: ${props => props.theme.fontColorSecondary};\n`\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  background: ${props => props.theme.colorMain};\n  font-size: ${props => props.theme.fontSizeLarge};\n  min-height: 64px;\n  box-sizing: border-box;\n  padding: 1.25em 0;\n`\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n","import ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst createClient = (token: string) => {\n  if(!token) {\n    return null;\n  }\n\n  return new ApolloClient({\n    uri: 'https://api.github.com/graphql',\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    cache: new InMemoryCache()\n  });\n}\n\nexport default createClient\n","export const getUrlParameter = (url: string, name: string) => {\n  //eslint-disable-next-line\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n  const results = regex.exec(url);\n  return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n","import storageHelper from 'storage-helper'\n\nexport const getItem = (key: string) => storageHelper.getItem(key)\nexport const setItem = (key: string, value: any) => storageHelper.setItem(key, value)\n","import { createStore } from 'reusable';\nimport axios, { AxiosResponse } from 'axios'\nimport { useState } from 'react';\nimport createClient from 'apollo';\nimport { getUrlParameter } from 'helpers/url';\nimport { getItem, setItem } from 'helpers/storage';\n\ninterface IUseGithub {\n  searchName?: string,\n  search?: (query: string) => Promise<any>,\n  authorize?: () => void,\n  errors?: {\n    cors?: string\n  },\n  fetching?: boolean,\n  apolloClient?: any,\n  initApolloClient?: () => void,\n  logout?: () => void\n}\n\nconst useGithub = createStore((): IUseGithub => {\n  const [searchName, setSearchName] = useState<string>('')\n  const [apolloClient, setApolloClient] = useState<any>(null);\n  const [errors, setErrors] = useState<{cors? : string}>({})\n  const [fetching, setFetching] = useState<boolean>(false);\n\n  const GITHUB_URL = 'https://github.com/login/oauth'\n  const GITHUB_TOKEN_KEY = 'GITHUB_TOKEN'\n\n  const authorize = () => {\n    window.location.href = `${GITHUB_URL}/authorize?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&scope=user`;\n  }\n\n  const getAccessToken = (code: string): Promise<any> => {\n    return axios({\n      method: 'post',\n      url: `${GITHUB_URL}/access_token`,\n      params: {\n        client_id: process.env.REACT_APP_GITHUB_CLIENT_ID,\n        client_secret: process.env.REACT_APP_GITHUB_CLIENT_SECRET,\n        code\n      }\n    })\n      .then(saveAccessToken)\n      .catch(() => {\n        setErrors({ cors: 'CORS Error' })\n        setFetching(false)\n      })\n  }\n\n  const saveAccessToken = ({ data }: AxiosResponse): void => {\n    const token = getUrlParameter(`?${data}`, 'access_token')\n\n    if(!token) {\n      return setFetching(false)\n    }\n\n    setItem(GITHUB_TOKEN_KEY, token)\n    setApolloClient(createClient(token))\n    setFetching(false)\n  }\n\n  const initApolloClient = (): void => {\n    const code = getUrlParameter(window.location.href, 'code');\n    const tokenValue = getItem(GITHUB_TOKEN_KEY);\n    if(!code) return;\n\n    tokenValue\n      ? setApolloClient(createClient(tokenValue))\n      : getAccessToken(code)\n  }\n\n  const logout = (): void => {\n    setItem(GITHUB_TOKEN_KEY, '')\n    setApolloClient(null)\n  }\n\n  const search = async (search: string): Promise<any> => {\n    setSearchName(search)\n  }\n\n  return {\n    searchName,\n    search,\n    authorize,\n    apolloClient,\n    initApolloClient,\n    logout,\n    fetching,\n    errors\n  }\n})\n\nexport default useGithub\n","import styled from 'styled-components';\n\ninterface IProps {\n  centered?: boolean,\n  secondary?: boolean,\n  border?: boolean\n}\n\nexport const H1 = styled.h1`\n  font-weight: ${props => props.theme.fontWeightBold};\n  text-decoration: none;\n  color: ${props => props.theme.fontColorSecondary};\n  word-break: break-all;\n`\n\nexport const H2 = styled.h2<IProps>`\n  color: ${(props) => props.secondary ? props.theme.colorSecondary : props.theme.colorMain};\n  text-align: ${(props) => props.centered ? 'center' : 'left'};\n  font-size: ${props => props.theme.fontSizeLarge};\n  font-weight: ${props => props.theme.fontWeightMedium};\n  border-bottom: 1px solid #E0E0E0;\n  padding-bottom: 16px;\n  word-break: break-all;\n`\n\n  export const H3 = styled.h3`\n  font-size: ${props => props.theme.fontSizeLarge};\n  color: ${props => props.theme.fontColorMain};\n  word-break: break-all;\n`\n\nexport const Error = styled.small`\n  color: ${props => props.theme.colorSecondary};\n  font-size: 12px;\n`\n\nexport const Tag = styled.p`\n  margin: 10px 0;\n  color: ${props => props.theme.colorMain};\n  font-size: 12px;\n`\n","import styled from 'styled-components';\n\ninterface IProps {\n  position?: string\n}\n\nexport const ButtonContainer = styled.div<IProps>`\n  text-align: ${props => props.position || 'center'};\n`\n\nexport const PrimaryButton = styled.button`\n  box-shadow:\n    0 2px 2px 0 rgba(0,0,0,.14),\n    0 3px 1px -2px rgba(0,0,0,.2),\n    0 1px 5px 0 rgba(0,0,0,.12);\n  background: ${props => props.disabled ? '#fff' : props.theme.colorSecondary};\n  color: ${props => props.disabled ? props.theme.fontColorThird : props.theme.fontColorSecondary};\n  border: 0;\n  border-radius: 2px;\n  font-size: ${props => props.theme.fontSizeSmall};\n  padding: 6px 1em;\n  font-weight: ${props => props.theme.fontWeightBold};\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Container } from 'styles/grid';\nimport { Header, HeaderContainer } from './Header.styled';\nimport useGithub from 'hooks/useGithub';\n\nimport { H1 } from 'styles/typo';\nimport { PrimaryButton } from 'styles/buttons';\n\nconst HeaderComponent = (): JSX.Element => {\n  const { apolloClient, logout }  = useGithub();\n  return (\n    <Header>\n      <Container>\n        <HeaderContainer>\n          <Link to=\"/\">\n            <H1>Github App</H1>\n          </Link>\n\n          {apolloClient && <PrimaryButton onClick={logout}>Logout</PrimaryButton>}\n        </HeaderContainer>\n      </Container>\n    </Header>\n  )\n}\nexport default HeaderComponent\n","import React from 'react';\n\nimport { Container } from 'styles/grid';\nimport Layout from 'styles/layout';\n\nimport Header from 'common/Header';\n\nconst MainLayout: React.FC = ({ children }): JSX.Element => (\n  <>\n    <Header/>\n    <Container>\n      <Layout>\n        {children}\n      </Layout>\n    </Container>\n  </>\n)\n\nexport default MainLayout\n","import styled from 'styled-components';\n\nexport const InputRow = styled.div`\n  margin: 1em 0;\n`\n\nexport const Input = styled.input`\n  border: 0;\n  box-shadow: 0;\n  border-bottom: 1px solid ${props => props.theme.fontColorMain};\n  outline: none;\n  display: block;\n  width: 100%;\n  transition: border-bottom .3s ease;\n  padding-bottom: 2px;\n\n  &:focus {\n      border-bottom: 2px solid ${props => props.theme.colorMain};\n  }\n`\n\nexport const Label = styled.label`\n  color: ${props => props.theme.colorMain};\n  display: block;\n  font-size: 12px;\n  margin-bottom: .5em;\n  font-weight: ${props => props.theme.fontWeightMedium};\n`\n","import React from 'react'\nimport { useFormState } from 'react-use-form-state';\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport useGithub from 'hooks/useGithub';\n\nimport { PrimaryButton, ButtonContainer } from 'styles/buttons';\nimport { InputRow, Input, Label } from 'styles/form';\nimport { H2 } from 'styles/typo';\nimport { RESULTS_URL } from 'consts/urls'\n\nconst Search: React.FC<RouteComponentProps> = ({ history, match }): JSX.Element => {\n  const { search } = useGithub();\n  const [formState, { text }] = useFormState();\n\n  const onSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n    search(formState.values.query).then(() => history.push(RESULTS_URL))\n  }\n\n  const { values: { query } } = formState;\n\n  return (\n    <>\n      <H2> Github Search </H2>\n      <form onSubmit={onSubmit}>\n        <InputRow>\n          <Label> Repository name </Label>\n          <Input {...text('query')} required />\n        </InputRow>\n        <ButtonContainer>\n          <PrimaryButton disabled={!query} type=\"submit\"> Search </PrimaryButton>\n        </ButtonContainer>\n      </form>\n    </>\n  )\n}\n\nexport default Search\n","export const SEARCH_URL: string = '/';\nexport const RESULTS_URL: string = '/results';\nexport const DETAILS_URL: string = '/details';\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  text-decoration: none;\n  display: flex;\n  padding: 1em 0;\n  border-bottom: 1px solid #E0E0E0;\n`\n\nexport const Description = styled.p`\n  font-size: ${props => props.theme.fontSizeSmall};\n  color: ${props => props.theme.fontColorThird};\n  font-weight:  ${props => props.theme.fontWeightMedium};\n`\n\nexport const ListItemContainer = styled.div`\n  padding: 5px 0;\n  margin-left: 2em;\n  width: 80%;\n`\n\nexport const ListItemButton = styled.small`\n  float: right;\n  color: ${props => props.theme.fontColorMain};\n  font-size: ${props => props.theme.fontSizeSmall};\n  text-decoration: none;\n`\n","import styled from 'styled-components';\n\ninterface IProps {\n  big?: any\n}\n\nexport const Icon = styled.img<IProps>`\n  display: block;\n  /* margin: auto; */\n  width: 100%;\n  max-width: ${props => props.big ? '100px' : '50px'};\n`\n\nexport const IconBack = styled.img`\n  float: left;\n`\n","import { gql } from 'apollo-boost';\n\nexport const GET_REPOSITORIES = gql`\n  query($name: String!){\n    search(query: $name, type: REPOSITORY, first: 10) {\n\n      repositoryCount\n      nodes {\n          ... on Repository {\n            id\n            name\n            description\n            stargazers {\n              totalCount\n            }\n            owner {\n              login\n              avatarUrl\n            }\n            primaryLanguage {\n              id\n              name\n            }\n            updatedAt\n          }\n      }\n    }\n  }\n`;\n\nexport const REPOSITORY_INFO = gql`\n  query($owner: String! $name: String!){\n    repository(owner: $owner name: $name) {\n      id\n      name\n      description\n      stargazers {\n        totalCount\n      }\n      owner {\n        login\n        avatarUrl\n      }\n      primaryLanguage {\n        id\n        name\n      }\n      updatedAt\n    }\n  }\n`;\n","import React from 'react'\nimport styled from 'styled-components'\nimport Loader from 'react-loader-spinner'\n\nconst LoaderWrapper = styled.div`\n  text-align: center;\n`\n\nconst LoaderComponent = () => (\n  <LoaderWrapper>\n    <Loader\n      type=\"Puff\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000} //3 secs\n    />\n  </LoaderWrapper>\n\n)\n\nexport default LoaderComponent\n","import React from 'react';\nimport useGithub from 'hooks/useGithub';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Image } from 'rebass'\n\nimport { H2, H3, Tag } from 'styles/typo';\n\nimport { ListItem, ListItemContainer, Description } from './Results.styled';\nimport { ButtonContainer, PrimaryButton } from 'styles/buttons';\nimport { IconBack } from 'styles/icons';\n\nimport ArrowIcon from 'assets/arrow.svg';\n\nimport { GET_REPOSITORIES } from 'queries'\n\nimport { SEARCH_URL, DETAILS_URL } from 'consts/urls';\nimport Loader from 'common/Loader';\n\nconst Results: React.FC<RouteComponentProps> = ({ history }): JSX.Element => {\n  const { searchName } = useGithub();\n  const { loading, error, data } = useQuery(GET_REPOSITORIES, {\n    variables: { name: searchName },\n  });\n\n  if(loading) return <Loader />;\n  if(error) history.push(SEARCH_URL);\n\n  const { search: { nodes } } = data\n\n  if(nodes.length === 0) history.push(SEARCH_URL)\n\n  return (\n    <>\n      <H2 centered>\n        Github Repos\n        <Link to={SEARCH_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n      </H2>\n      <ul>\n        {\n          nodes.map(({ id, name, description, primaryLanguage, owner, stargazers }) => (\n            <ListItem key={id}>\n              <Image\n                src={owner.avatarUrl}\n                sx={{\n                  width: '100px',\n                  height: '100px',\n                  margin: 'auto',\n                  borderRadius: 50,\n                }}\n              />\n              <ListItemContainer>\n                <H3>{name} ({owner.login}) ({stargazers.totalCount} stars)</H3>\n                <Description>\n                  {description}\n                </Description>\n                {primaryLanguage && <Tag> #{primaryLanguage.name} </Tag>}\n                <ButtonContainer position=\"right\">\n                  <Link to={`${DETAILS_URL}/${owner.login}/${name}`}>\n                    <PrimaryButton> Show more </PrimaryButton>\n                  </Link>\n                </ButtonContainer>\n              </ListItemContainer>\n            </ListItem>\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nexport default Results\n","import styled from 'styled-components'\n\nexport const DetailItem = styled.li`\n  color: ${props => props.theme.fontColorThird};\n  margin: .5em 0;\n`\nexport const Detail = styled.span`\n  color: ${props => props.theme.colorMain};\n`\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n  Box,\n  Image\n} from 'rebass'\n\nimport { H2 } from 'styles/typo';\nimport { IconBack } from 'styles/icons';\nimport { DetailItem, Detail } from './Details.styled';\n\nimport ArrowIcon from 'assets/arrow.svg';\n\nimport Loader from 'common/Loader';\nimport { RESULTS_URL, SEARCH_URL } from 'consts/urls';\n\nimport { REPOSITORY_INFO } from 'queries'\n\nconst DetailComponent = ({ history, match }): JSX.Element | null => {\n  const { loading, error, data } = useQuery(REPOSITORY_INFO, {\n    variables: {\n      name: match.params.name,\n      owner: match.params.owner\n    },\n  });\n\n  if(!match.params || !match.params.name || !match.params.owner || error) {\n    history.push(SEARCH_URL);\n    return null;\n  }\n\n  if (loading) return <Loader />\n\n  const { repository: { owner, name, stargazers, primaryLanguage } } = data;\n\n  return <>\n    <H2 centered>\n      Repository Detail\n      <Link to={RESULTS_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n    </H2>\n    <Box mt={4}>\n      <H2 secondary>Owner</H2>\n      <Image\n        sx={{\n          width: '100px',\n          height: '100px',\n          margin: 'auto',\n        }}\n        mt={4}\n        src={owner.avatarUrl}\n        alt=\"Owner\"\n      />\n      <ul>\n        <DetailItem> Login: <Detail>{owner.login}</Detail> </DetailItem>\n        {owner.description && <DetailItem>Description: <Detail>{owner.description}</Detail></DetailItem>}\n      </ul>\n    </Box>\n    <Box>\n      <H2 secondary>Repository</H2>\n      <ul>\n        <DetailItem> Name: <Detail>{name}</Detail> </DetailItem>\n        <DetailItem>Stars: <Detail>{stargazers.totalCount}</Detail></DetailItem>\n        {primaryLanguage && <DetailItem>Primary language: <Detail>{primaryLanguage.name}</Detail></DetailItem>}\n      </ul>\n    </Box>\n  </>\n}\n\nexport default DetailComponent;\n","import React, { useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Search from 'pages/Search';\nimport Results from 'pages/Results';\nimport Details from 'pages/Details';\n\nimport { PrimaryButton, ButtonContainer } from 'styles/buttons';\nimport useGithub from 'hooks/useGithub';\n\nimport Loader from 'common/Loader';\n\nimport { H2 } from 'styles/typo';\n\nconst App: React.FC = (): JSX.Element => {\n  const { authorize, initApolloClient, apolloClient, errors, fetching } = useGithub()\n  useEffect(initApolloClient, [])\n\n  if(fetching) return <Loader />\n\n  if(apolloClient) {\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Switch>\n          <Route exact path=\"/\" component={Search} />\n          <Route path=\"/results\" component={Results} />\n          <Route path=\"/details/:owner/:name\" component={Details} />\n        </Switch>\n      </ApolloProvider>\n    )\n  }\n\n  return (\n    <>\n    {errors.cors &&  <H2 centered>Make sure you have CORS enabled in your browser</H2> }\n    <ButtonContainer>\n      <PrimaryButton disabled={errors.cors} onClick={authorize}> Login </PrimaryButton>\n    </ButtonContainer>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { ReusableProvider } from 'reusable';\nimport { ThemeProvider } from 'styled-components';\n\nimport theme from 'styles/theme';\nimport Global from 'styles/global';\n\nimport MainLayout from 'layouts/main'\n\nimport App from 'pages/App';\n\nconst Router: React.FC = (): JSX.Element => (\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <ReusableProvider>\n        <MainLayout>\n          <App />\n        </MainLayout>\n        <Global />\n      </ReusableProvider>\n    </ThemeProvider>\n  </HashRouter>\n)\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport Router from './router';\nimport * as serviceWorker from './serviceWorker';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nrender(<Router />, document.getElementById('root'));\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/arrow.9c0790b9.svg\";"],"sourceRoot":""}