{"version":3,"sources":["assets/arrow.svg","styles/theme.tsx","styles/global.tsx","styles/grid.tsx","styles/layout.tsx","common/Header.styled.tsx","apollo.tsx","hooks/useGithub.tsx","styles/typo.tsx","styles/buttons.tsx","common/Header.tsx","layouts/main.tsx","styles/form.tsx","pages/Search/index.tsx","consts/urls.tsx","pages/Results/Results.styled.tsx","styles/icons.tsx","queries/index.tsx","pages/Results/index.tsx","pages/Details/index.tsx","pages/App/index.tsx","routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","mainTheme","siteWidth","colorMain","colorSecondary","fontColorMain","fontColorSecondary","fontSizeSmall","fontSizeMedium","fontSizeLarge","fontWeightMedium","fontWeightBold","Global","createGlobalStyle","reset","Container","styled","div","props","theme","Layout","Header","header","HeaderContainer","createClient","token","ApolloClient","uri","headers","Authorization","cache","InMemoryCache","useGithub","createStore","useState","searchName","setSearchName","setToken","apolloClient","setApolloClient","search","a","authorize","window","location","href","process","initApolloClient","code","x","indexOf","slice","getCode","axios","post","then","data","response","toString","includes","y","logout","H1","h1","H2","h2","centered","H3","h3","ButtonContainer","position","PrimaryButton","button","HeaderComponent","to","onClick","MainLayout","children","InputRow","Input","input","Label","label","Search","history","match","useFormState","formState","text","onSubmit","ev","preventDefault","values","query","push","required","type","ListItem","li","Description","p","ListItemContainer","small","Icon","img","IconBack","GET_REPOSITORIES","gql","REPOSITORY_INFO","Results","useQuery","variables","name","loading","error","nodes","src","ArrowIcon","alt","map","id","primaryLanguage","owner","stargazers","key","avatarUrl","login","totalCount","Detail","params","repository","description","App","useEffect","client","exact","path","component","Details","Router","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,uICiB5BC,EAjBG,CAChBC,UAAW,SAEXC,UAAW,UACXC,eAAgB,UAEhBC,cAAe,OACfC,mBAAoB,OAEpBC,cAAe,OACfC,eAAgB,OAChBC,cAAe,OAEfC,iBAAkB,MAClBC,eAAgB,O,sWCXlB,IAiBeC,EAjBAC,4BAAH,IACRC,K,mICFG,IAAMC,EAAYC,UAAOC,IAAV,KACP,SAAAC,GAAK,OAAIA,EAAMC,MAAMjB,a,4TCDpC,IAaekB,EAbAJ,UAAOC,IAAV,KAKD,SAAAC,GAAK,OAAIA,EAAMC,MAAMd,iBAKhB,SAAAa,GAAK,OAAIA,EAAMC,MAAMb,sB,gTCV9B,IAAMe,EAASL,UAAOM,OAAV,KACH,SAAAJ,GAAK,OAAIA,EAAMC,MAAMhB,aACtB,SAAAe,GAAK,OAAIA,EAAMC,MAAMV,iBAMvBc,EAAkBP,UAAOC,IAAV,K,kECObO,EAdM,SAACC,GACpB,OAAIA,EAIG,IAAIC,IAAa,CACtBC,IAAK,iCACLC,QAAS,CACPC,cAAc,UAAD,OAAYJ,IAE3BK,MAAO,IAAIC,MARJ,MC8DIC,EAnDGC,uBAAY,WAAO,IAAD,EACEC,mBAAiB,IADnB,mBAC3BC,EAD2B,KACfC,EADe,OAERF,mBAAwB,MAFhB,mBAE3BT,EAF2B,KAEpBY,EAFoB,OAGMH,mBAAc,MAHpB,mBAG3BI,EAH2B,KAGbC,EAHa,KAwClC,MAAO,CACLJ,aACAK,OANU,uCAAG,WAAOA,GAAP,SAAAC,EAAA,sDACbL,EAAcI,GADD,2CAAH,sDAOVf,QACAiB,UAvCgB,WAChBC,OAAOC,SAASC,KAAhB,6DAA6EC,uBAA7E,gBAuCAR,eACAS,iBArCuB,WACvB,IAAMC,EArBM,WACd,IAAIL,OAAOC,SAASC,KAClB,OAAO,KAGT,IAAMI,EAAIN,OAAOC,SAASC,KAAKK,QAAQ,KAGvC,OAFaP,OAAOC,SAASC,KAAKM,MAAMF,EAAI,GAAI,GAejCG,GAEb,GAAG3B,EACD,OAAOc,EAAgBf,EAAaC,IAGtC4B,IAAMC,KAAN,gEAAoER,uBAApE,8DAAgKA,2CAAhK,iBAAmNE,IAClNO,MAAK,SAACC,GACL,IAAMC,EAAWD,EAAKA,KAAKE,WAE3B,GAAGD,EAASE,SAAS,gBAAiB,CACpC,IAAMV,EAAIQ,EAASP,QAAQ,KACrBU,EAAIH,EAASP,QAAQ,KACrBzB,EAAQgC,EAASC,WAAWP,MAAMF,EAAI,EAAGW,GAE/CvB,EAASZ,GACTc,EAAgBf,EAAaC,SAqBjCoC,OAhBa,WACbxB,EAAS,MACTE,EAAgB,W,4gBC3Cb,IAAMuB,EAAK9C,UAAO+C,GAAV,KACE,SAAA7C,GAAK,OAAIA,EAAMC,MAAMR,kBAE3B,SAAAO,GAAK,OAAIA,EAAMC,MAAMb,sBAInB0D,EAAKhD,UAAOiD,GAAV,KACJ,SAAA/C,GAAK,OAAIA,EAAMC,MAAMhB,aAChB,SAACe,GAAD,OAAmBA,EAAMgD,SAAW,SAAW,UAChD,SAAAhD,GAAK,OAAIA,EAAMC,MAAMV,iBACnB,SAAAS,GAAK,OAAIA,EAAMC,MAAMT,oBAMzByD,EAAKnD,UAAOoD,GAAV,KACA,SAAAlD,GAAK,OAAIA,EAAMC,MAAMV,iBACzB,SAAAS,GAAK,OAAIA,EAAMC,MAAMd,iB,obCnBzB,IAAMgE,EAAkBrD,UAAOC,IAAV,KAEZ,SAACC,GAAD,OAAmBA,EAAMoD,UAAY,YAGxCC,EAAgBvD,UAAOwD,OAAV,KAKV,SAAAtD,GAAK,OAAIA,EAAMC,MAAMf,kBAC1B,SAAAc,GAAK,OAAIA,EAAMC,MAAMb,sBAGjB,SAAAY,GAAK,OAAIA,EAAMC,MAAMZ,iBAEnB,SAAAW,GAAK,OAAIA,EAAMC,MAAMR,kBCIvB8D,EAhBS,WAAoB,IAAD,EACdzC,IAAnBP,EADiC,EACjCA,MAAOoC,EAD0B,EAC1BA,OACf,OACE,kBAACxC,EAAD,KACE,kBAACN,EAAD,KACE,kBAACQ,EAAD,KACE,kBAAC,IAAD,CAAMmD,GAAG,KACP,kBAACZ,EAAD,oBAGDrC,GAAS,kBAAC8C,EAAD,CAAeI,QAASd,GAAxB,cCFLe,EAXc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC3B,oCACE,kBAAC,EAAD,MACA,kBAAC9D,EAAD,KACE,kBAAC,EAAD,KACG8D,M,wkBCVF,IAAMC,EAAW9D,UAAOC,IAAV,KAIR8D,EAAQ/D,UAAOgE,MAAV,KAGW,SAAA9D,GAAK,OAAIA,EAAMC,MAAMd,iBAQjB,SAAAa,GAAK,OAAIA,EAAMC,MAAMhB,aAIzC8E,EAAQjE,UAAOkE,MAAV,KACP,SAAAhE,GAAK,OAAIA,EAAMC,MAAMhB,aAIf,SAAAe,GAAK,OAAIA,EAAMC,MAAMT,oBCUvByE,GAzB+B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QACvC5C,GADyE,EAAzB6C,MACrCrD,IAAXQ,QADyE,EAEnD8C,cAFmD,mBAE1EC,EAF0E,KAE7DC,EAF6D,KAE7DA,KAOpB,OACE,oCACE,kBAACxB,EAAD,wBACE,0BAAMyB,SARK,SAACC,GAChBA,EAAGC,iBACHnD,EAAO+C,EAAUK,OAAOC,OAAOtC,MAAK,kBAAM6B,EAAQU,KChBnB,iBDuBzB,kBAAChB,EAAD,KACE,kBAACG,EAAD,oBACA,kBAACF,EAAD,iBAAWS,EAAK,SAAhB,CAA0BO,UAAQ,MAEpC,kBAAC1B,EAAD,KACE,kBAACE,EAAD,CAAeyB,KAAK,UAApB,gB,giBE3BL,IAAMC,GAAWjF,UAAOkF,GAAV,MAMRC,GAAcnF,UAAOoF,EAAV,MACT,SAAAlF,GAAK,OAAIA,EAAMC,MAAMZ,iBAElB,SAAAW,GAAK,OAAIA,EAAMC,MAAMT,oBAG1B2F,GAAoBrF,UAAOC,IAAV,MAMAD,UAAOsF,MAAV,MAEhB,SAAApF,GAAK,OAAIA,EAAMC,MAAMd,iBACjB,SAAAa,GAAK,OAAIA,EAAMC,MAAMZ,iB,sNCrB7B,IAAMgG,GAAOvF,UAAOwF,IAAV,MAMJC,GAAWzF,UAAOwF,IAAV,M,i9BCNd,IAAME,GAAmBC,YAAH,MA2BhBC,GAAkBD,YAAH,MCkCbE,GA7CgC,SAAC,GAAqC,IAAnCzB,EAAkC,EAAlCA,QACxCjD,EAAeH,IAAfG,WAD0E,EAEjD2E,aAASJ,GAAkB,CAC1DK,UAAW,CAAEC,KAAM7E,KADb8E,EAF0E,EAE1EA,QAASC,EAFiE,EAEjEA,MAAO1D,EAF0D,EAE1DA,KAIxB,GAAGyD,EAAS,OAAO,KAEnB,GAAGC,EAED,OADA9B,EAAQU,KJ3BsB,KI4BvB,KAVyE,IAahEqB,EAAY3D,EAAtBhB,OAAU2E,MAElB,OACE,oCACE,kBAACnD,EAAD,CAAIE,UAAQ,GAAZ,eAEE,kBAAC,IAAD,CAAMQ,GJrCoB,KIqCJ,kBAAC+B,GAAD,CAAUW,IAAKC,KAAWC,IAAI,WAEtD,4BAEIH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIR,EAAP,EAAOA,KAAMS,EAAb,EAAaA,gBAAiBC,EAA9B,EAA8BA,MAAOC,EAArC,EAAqCA,WAArC,OACR,kBAAC1B,GAAD,CAAU2B,IAAKJ,GACb,kBAACjB,GAAD,CAAMa,IAAKM,EAAMG,UAAWP,IAAI,UAChC,kBAACjB,GAAD,KACE,kBAAClC,EAAD,KAAK6C,EAAL,KAAaU,EAAMI,MAAnB,MAA6BH,EAAWI,WAAxC,WACA,kBAAC5B,GAAD,KACGsB,GAAe,WAAQA,EAAgBT,OAE1C,kBAAC3C,EAAD,CAAiBC,SAAS,SACxB,kBAAC,IAAD,CAAMI,GAAE,UJhDS,WIgDT,YAAoBgD,EAAMI,MAA1B,YAAmCd,IACzC,kBAACzC,EAAD,8BCDLyD,GAtCA,SAAC,GAA4C,IAA1C5C,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAgC,EACxByB,aAASF,GAAiB,CACzDG,UAAW,CACTC,KAAM3B,EAAM4C,OAAOjB,KACnBU,MAAOrC,EAAM4C,OAAOP,SAHhBT,EADiD,EACjDA,QAASC,EADwC,EACxCA,MAAO1D,EADiC,EACjCA,KAOxB,IAAI6B,EAAM4C,SAAW5C,EAAM4C,OAAOjB,OAAS3B,EAAM4C,OAAOP,OAASR,EAE/D,OADA9B,EAAQU,KLrBsB,KKsBvB,KAGT,GAAImB,EAAS,OAAO,KAbqC,IAejDiB,EAAe1E,EAAf0E,WAER,OAAO,oCACL,kBAAClE,EAAD,CAAIE,UAAQ,GAAZ,cAEE,kBAAC,IAAD,CAAMQ,GL/BuB,YK+BN,kBAAC+B,GAAD,CAAUW,IAAKC,KAAWC,IAAI,WAEvD,6BACE,kBAACnD,EAAD,cACA,kBAACoC,GAAD,CAAMa,IAAKc,EAAWR,MAAMG,UAAWP,IAAI,UAC3C,2BAAIY,EAAWR,MAAMI,MAArB,KACA,2BAAII,EAAWR,MAAMS,YAArB,MAGF,6BACE,kBAAChE,EAAD,aACA,2BAAI+D,EAAWlB,MACf,2BAAIkB,EAAWP,WAAWI,YAC1B,2BAAIG,EAAWT,iBAAmBS,EAAWT,gBAAgBT,S,QCVpDoB,GAvBO,WAAoB,IAAD,EACepG,IAA9CU,EAD+B,EAC/BA,UAAWK,EADoB,EACpBA,iBAAkBT,EADE,EACFA,aAGrC,OAFA+F,oBAAUtF,EAAkB,IAEzBT,EAEC,kBAAC,KAAD,CAAgBgG,OAAQhG,GACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiG,OAAK,EAACC,KAAK,IAAIC,UAAWtD,KACjC,kBAAC,IAAD,CAAOqD,KAAK,WAAWC,UAAW5B,KAClC,kBAAC,IAAD,CAAO2B,KAAK,wBAAwBC,UAAWC,OAOrD,kBAACrE,EAAD,KACE,kBAACE,EAAD,CAAeI,QAASjC,GAAxB,aCLSiG,GAbU,kBACvB,kBAAC,IAAD,KACE,kBAAC,gBAAD,CAAexH,MAAOA,GACpB,kBAAC,mBAAD,KACE,kBAAC,EAAD,KACE,kBAAC,GAAD,OAEF,kBAAC,EAAD,UCPFyH,GAAcC,QACW,cAA7BlG,OAAOC,SAASkG,UAEe,UAA7BnG,OAAOC,SAASkG,UAEhBnG,OAAOC,SAASkG,SAASzD,MACvB,2DA8CN,SAAS0D,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTzF,MAAK,SAAA8F,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAA9C,GACL0C,QAAQ1C,MAAM,4CAA6CA,MCnGjE+C,IAASC,OAAO,kBAAC,GAAD,MAAYC,SAASC,eAAe,SDsB7C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImB,IACnBvH,UACDH,OAAOC,SAASC,MAEJyH,SAAW3H,OAAOC,SAAS0H,OAIvC,OAGF3H,OAAO4H,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMlG,UAAN,sBAEP8F,KAgEV,SAAiCI,EAAeC,GAE9CuB,MAAMxB,GACHzF,MAAK,SAAAE,GAEJ,IAAMgH,EAAchH,EAAS7B,QAAQ8I,IAAI,gBAEnB,MAApBjH,EAASkH,QACO,MAAfF,IAA8D,IAAvCA,EAAYvH,QAAQ,cAG5CgG,UAAUC,cAAcyB,MAAMrH,MAAK,SAAA8F,GACjCA,EAAawB,aAAatH,MAAK,WAC7BZ,OAAOC,SAASkI,eAKpB/B,GAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAkB,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMrH,MAAK,WACjCqG,QAAQC,IACN,iHAMJd,GAAgBC,EAAOC,OCnD/BE,K","file":"static/js/main.3b66b7ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.9c0790b9.svg\";","const mainTheme = {\n  siteWidth: '1024px',\n\n  colorMain: '#3f51b5',\n  colorSecondary: '#F94983',\n\n  fontColorMain: '#000',\n  fontColorSecondary: '#fff',\n\n  fontSizeSmall: '14px',\n  fontSizeMedium: '16px',\n  fontSizeLarge: '20px',\n\n  fontWeightMedium: '500',\n  fontWeightBold: '700',\n}\n\nexport default mainTheme\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nconst Global = createGlobalStyle`\n  ${reset}\n\n  body {\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #EEE;\n    letter-spacing: 0.1px;\n    line-height: 1.6;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default Global;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: ${props => props.theme.siteWidth};\n  padding: 0 1.25em;\n  margin: 0 auto;\n`\n","import styled from 'styled-components';\n\nconst Layout = styled.div`\n  box-shadow:\n    0 2px 4px -1px rgba(0,0,0,.2),\n    0 4px 5px 0 rgba(0,0,0,.14),\n    0 1px 10px 0 rgba(0,0,0,.12);\n  color: ${props => props.theme.fontColorMain};\n  padding: 1.5em;\n  max-width: 1024px;\n  box-sizing: border-box;\n  margin: 40px auto;\n  background: ${props => props.theme.fontColorSecondary};\n`\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  background: ${props => props.theme.colorMain};\n  font-size: ${props => props.theme.fontSizeLarge};\n  min-height: 64px;\n  box-sizing: border-box;\n  padding: 1.25em 0;\n`\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n","import ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst createClient = (token: string) => {\n  if(!token) {\n    return null;\n  }\n\n  return new ApolloClient({\n    uri: 'https://api.github.com/graphql',\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    cache: new InMemoryCache()\n  });\n}\n\nexport default createClient\n","import { createStore } from 'reusable';\nimport axios from 'axios'\nimport { useState } from 'react';\nimport createClient from 'apollo';\n\nconst getCode = () => {\n  if(!window.location.href) {\n    return null;\n  }\n\n  const x = window.location.href.indexOf(\"=\")\n  const code = window.location.href.slice(x + 1, -2)\n\n  return code;\n}\n\nconst useGithub = createStore(() => {\n  const [searchName, setSearchName] = useState<string>('')\n  const [token, setToken] = useState<string | null>(null)\n  const [apolloClient, setApolloClient] = useState<any>(null);\n\n  const authorize = () => {\n    window.location.href = `https://github.com/login/oauth/authorize?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&scope=user`;\n  }\n\n  const initApolloClient = () => {\n    const code = getCode();\n\n    if(token) {\n      return setApolloClient(createClient(token))\n    }\n\n    axios.post(`https://github.com/login/oauth/access_token?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&redirect_uri=http://localhost:3001/&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}&code=${code}`)\n    .then((data) => {\n      const response = data.data.toString();\n\n      if(response.includes('access_token')) {\n        const x = response.indexOf(\"=\")\n        const y = response.indexOf(\"&\")\n        const token = response.toString().slice(x + 1, y)\n\n        setToken(token)\n        setApolloClient(createClient(token))\n      }\n    })\n  }\n\n  const logout = () => {\n    setToken(null)\n    setApolloClient(null)\n  }\n\n  const search = async (search: string) => {\n    setSearchName(search)\n  }\n\n  return {\n    searchName,\n    search,\n    token,\n    authorize,\n    apolloClient,\n    initApolloClient,\n    logout\n  }\n})\n\nexport default useGithub\n","import styled from 'styled-components';\n\ninterface IProps {\n  centered?: boolean\n}\n\nexport const H1 = styled.h1`\n  font-weight: ${props => props.theme.fontWeightBold};\n  text-decoration: none;\n  color: ${props => props.theme.fontColorSecondary};\n  word-break: break-all;\n`\n\nexport const H2 = styled.h2`\n  color: ${props => props.theme.colorMain};\n  text-align: ${(props: IProps) => props.centered ? 'center' : 'left'};\n  font-size: ${props => props.theme.fontSizeLarge};\n  font-weight: ${props => props.theme.fontWeightMedium};\n  border-bottom: 1px solid #E0E0E0;\n  padding-bottom: 16px;\n  word-break: break-all;\n`\n\nexport const H3 = styled.h3`\n  font-size: ${props => props.theme.fontSizeLarge};\n  color: ${props => props.theme.fontColorMain};\n  word-break: break-all;\n`\n","import styled from 'styled-components';\n\ninterface IProps {\n  position?: string\n}\n\nexport const ButtonContainer = styled.div`\n  margin: 1em 1.5em;\n  text-align: ${(props: IProps) => props.position || 'center'};\n`\n\nexport const PrimaryButton = styled.button`\n  box-shadow:\n    0 2px 2px 0 rgba(0,0,0,.14),\n    0 3px 1px -2px rgba(0,0,0,.2),\n    0 1px 5px 0 rgba(0,0,0,.12);\n  background: ${props => props.theme.colorSecondary};\n  color: ${props => props.theme.fontColorSecondary};\n  border: 0;\n  border-radius: 2px;\n  font-size: ${props => props.theme.fontSizeSmall};\n  padding: 6px 1em;\n  font-weight: ${props => props.theme.fontWeightBold};\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Container } from 'styles/grid';\nimport { Header, HeaderContainer } from './Header.styled';\nimport useGithub from 'hooks/useGithub';\n\nimport { H1 } from 'styles/typo';\nimport { PrimaryButton } from 'styles/buttons';\n\nconst HeaderComponent = (): JSX.Element => {\n  const { token, logout }  = useGithub();\n  return (\n    <Header>\n      <Container>\n        <HeaderContainer>\n          <Link to=\"/\">\n            <H1>Github App</H1>\n          </Link>\n\n          {token && <PrimaryButton onClick={logout}>Logout</PrimaryButton>}\n        </HeaderContainer>\n      </Container>\n    </Header>\n  )\n}\nexport default HeaderComponent\n","import React from 'react';\n\nimport { Container } from 'styles/grid';\nimport Layout from 'styles/layout';\n\nimport Header from 'common/Header';\n\nconst MainLayout: React.FC = ({ children }): JSX.Element => (\n  <>\n    <Header/>\n    <Container>\n      <Layout>\n        {children}\n      </Layout>\n    </Container>\n  </>\n)\n\nexport default MainLayout\n","import styled from 'styled-components';\n\nexport const InputRow = styled.div`\n  margin: 1em 0;\n`\n\nexport const Input = styled.input`\n  border: 0;\n  box-shadow: 0;\n  border-bottom: 1px solid ${props => props.theme.fontColorMain};\n  outline: none;\n  display: block;\n  width: 100%;\n  transition: border-bottom .3s ease;\n  padding-bottom: 2px;\n\n  &:focus {\n      border-bottom: 2px solid ${props => props.theme.colorMain};\n  }\n`\n\nexport const Label = styled.label`\n  color: ${props => props.theme.colorMain};\n  display: block;\n  font-size: 12px;\n  margin-bottom: .5em;\n  font-weight: ${props => props.theme.fontWeightMedium};\n`\n","import React from 'react'\nimport { useFormState } from 'react-use-form-state';\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport useGithub from 'hooks/useGithub';\n\nimport { PrimaryButton, ButtonContainer } from 'styles/buttons';\nimport { InputRow, Input, Label } from 'styles/form';\nimport { H2 } from 'styles/typo';\nimport { RESULTS_URL } from 'consts/urls'\n\nconst Search: React.FC<RouteComponentProps> = ({ history, match }): JSX.Element => {\n  const { search } = useGithub();\n  const [formState, { text }] = useFormState();\n\n  const onSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n    search(formState.values.query).then(() => history.push(RESULTS_URL))\n  }\n\n  return (\n    <>\n      <H2> Github Search </H2>\n        <form onSubmit={onSubmit}>\n          <InputRow>\n            <Label> Repo name </Label>\n            <Input {...text('query')} required />\n          </InputRow>\n          <ButtonContainer>\n            <PrimaryButton type=\"submit\"> Search </PrimaryButton>\n          </ButtonContainer>\n      </form>\n    </>\n  )\n}\n\nexport default Search\n","export const SEARCH_URL: string = '/';\nexport const RESULTS_URL: string = '/results';\nexport const DETAILS_URL: string = '/details';\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  text-decoration: none;\n  display: flex;\n  padding: 1em 0;\n`\n\nexport const Description = styled.p`\n  font-size: ${props => props.theme.fontSizeSmall};\n  color: #666;\n  font-weight:  ${props => props.theme.fontWeightMedium};\n`\n\nexport const ListItemContainer = styled.div`\n  padding: 5px 0;\n  margin-left: 2em;\n  width: 80%;\n`\n\nexport const ListItemButton = styled.small`\n  float: right;\n  color: ${props => props.theme.fontColorMain};\n  font-size: ${props => props.theme.fontSizeSmall};\n  text-decoration: none;\n`\n","import styled from 'styled-components';\n\nexport const Icon = styled.img`\n  display: block;\n  margin: auto;\n  width: 50px;\n`\n\nexport const IconBack = styled.img`\n  float: left;\n`\n","import { gql } from 'apollo-boost';\n\nexport const GET_REPOSITORIES = gql`\n  query($name: String!){\n    search(query: $name, type: REPOSITORY, first: 10) {\n\n      repositoryCount\n      nodes {\n          ... on Repository {\n            id\n            name\n            stargazers {\n              totalCount\n            }\n            owner {\n              login\n              avatarUrl\n            }\n            primaryLanguage {\n              id\n              name\n            }\n            updatedAt\n          }\n      }\n    }\n  }\n`;\n\nexport const REPOSITORY_INFO = gql`\n  query($owner: String! $name: String!){\n    repository(owner: $owner name: $name) {\n      id\n      name\n      description\n      stargazers {\n        totalCount\n      }\n      owner {\n        login\n        avatarUrl\n      }\n      primaryLanguage {\n        id\n        name\n      }\n      updatedAt\n    }\n  }\n`;\n","import React from 'react';\nimport useGithub from 'hooks/useGithub';\nimport { Link } from 'react-router-dom';\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { H2, H3 } from 'styles/typo';\n\nimport { ListItem, ListItemContainer, Description } from './Results.styled';\nimport { ButtonContainer, PrimaryButton } from 'styles/buttons';\nimport { Icon, IconBack } from 'styles/icons';\n\nimport ArrowIcon from 'assets/arrow.svg';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_REPOSITORIES } from 'queries'\n\nimport { SEARCH_URL, DETAILS_URL } from 'consts/urls';\n\nconst Results: React.FC<RouteComponentProps> = ({ history }): JSX.Element | null => {\n  const { searchName } = useGithub();\n  const { loading, error, data } = useQuery(GET_REPOSITORIES, {\n    variables: { name: searchName },\n  });\n\n  if(loading) return null;\n\n  if(error) {\n    history.push(SEARCH_URL);\n    return null;\n  }\n\n  const { search: { nodes } } = data\n\n  return (\n    <>\n      <H2 centered>\n        Github Repos\n        <Link to={SEARCH_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n      </H2>\n      <ul>\n        {\n          nodes.map(({ id, name, primaryLanguage, owner, stargazers }) => (\n            <ListItem key={id}>\n              <Icon src={owner.avatarUrl} alt=\"Owner\"/>\n              <ListItemContainer>\n                <H3>{name} ({owner.login}) ({stargazers.totalCount} stars)</H3>\n                <Description>\n                  {primaryLanguage && `#${primaryLanguage.name}`}\n                </Description>\n                <ButtonContainer position=\"right\">\n                  <Link to={`${DETAILS_URL}/${owner.login}/${name}`}>\n                    <PrimaryButton> Show more </PrimaryButton>\n                  </Link>\n                </ButtonContainer>\n              </ListItemContainer>\n            </ListItem>\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nexport default Results\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nimport { H2, H3 } from 'styles/typo';\nimport { Icon, IconBack } from 'styles/icons';\n\nimport ArrowIcon from 'assets/arrow.svg';\nimport { RESULTS_URL, SEARCH_URL } from 'consts/urls';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { REPOSITORY_INFO } from 'queries'\n\nconst Detail = ({ history, match }): JSX.Element | null => {\n  const { loading, error, data } = useQuery(REPOSITORY_INFO, {\n    variables: {\n      name: match.params.name,\n      owner: match.params.owner\n    },\n  });\n\n  if(!match.params || !match.params.name || !match.params.owner || error) {\n    history.push(SEARCH_URL);\n    return null;\n  }\n\n  if (loading) return null\n\n  const { repository } = data;\n\n  return <>\n    <H2 centered>\n      Repo Detail\n      <Link to={RESULTS_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n    </H2>\n    <div>\n      <H3>Owner</H3>\n      <Icon src={repository.owner.avatarUrl} alt=\"Owner\"/>\n      <p>{repository.owner.login} </p>\n      <p>{repository.owner.description} </p>\n\n    </div>\n    <div>\n      <H3>Repo</H3>\n      <p>{repository.name}</p>\n      <p>{repository.stargazers.totalCount}</p>\n      <p>{repository.primaryLanguage && repository.primaryLanguage.name}</p>\n    </div>\n  </>\n}\n\nexport default Detail;\n","import React, { useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom';\n\nimport Search from 'pages/Search';\nimport Results from 'pages/Results';\nimport Details from 'pages/Details';\n\nimport { PrimaryButton, ButtonContainer } from 'styles/buttons';\nimport useGithub from 'hooks/useGithub';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst App: React.FC = (): JSX.Element => {\n  const { authorize, initApolloClient, apolloClient } = useGithub()\n  useEffect(initApolloClient, [])\n\n  if(apolloClient) {\n    return (\n      <ApolloProvider client={apolloClient}>\n        <Switch>\n          <Route exact path=\"/\" component={Search} />\n          <Route path=\"/results\" component={Results} />\n          <Route path=\"/details/:owner/:name\" component={Details} />\n        </Switch>\n      </ApolloProvider>\n    )\n  }\n\n  return (\n    <ButtonContainer>\n      <PrimaryButton onClick={authorize}> Login </PrimaryButton>\n    </ButtonContainer>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { ReusableProvider } from 'reusable';\nimport { ThemeProvider } from 'styled-components';\n\nimport theme from 'styles/theme';\nimport Global from 'styles/global';\n\nimport MainLayout from 'layouts/main'\n\nimport App from 'pages/App';\n\nconst Router: React.FC = () => (\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <ReusableProvider>\n        <MainLayout>\n          <App />\n        </MainLayout>\n        <Global />\n      </ReusableProvider>\n    </ThemeProvider>\n  </HashRouter>\n)\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}