{"version":3,"sources":["assets/arrow.svg","styles/theme.tsx","styles/global.tsx","styles/layout.tsx","styles/grid.tsx","common/Header.styled.tsx","styles/typo.tsx","common/Header.tsx","hooks/useGithub.tsx","styles/buttons.tsx","styles/form.tsx","pages/Search/index.tsx","pages/Results/Results.styled.tsx","styles/icons.tsx","queries/index.tsx","pages/Results/index.tsx","consts/urls.tsx","pages/Details/index.tsx","routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","mainTheme","siteWidth","colorMain","colorSecondary","fontColorMain","fontColorSecondary","fontSizeSmall","fontSizeMedium","fontSizeLarge","fontWeightMedium","fontWeightBold","Global","createGlobalStyle","reset","Layout","styled","div","props","theme","Container","Header","header","HeaderContainer","H1","h1","H2","h2","centered","HeaderComponent","to","useGithub","createStore","useState","searchName","setSearchName","search","a","ButtonContainer","position","PrimaryButton","button","InputRow","Input","input","Label","label","Search","history","useFormState","formState","text","onSubmit","ev","preventDefault","values","query","push","required","type","ListItem","li","Icon","img","Title","h3","Description","p","ListItemContainer","small","IconBack","SEARCH","gql","Results","useQuery","variables","name","loading","error","data","nodes","src","ArrowIcon","alt","map","id","primaryLanguage","owner","stargazers","key","avatarUrl","login","totalCount","Detail","client","ApolloClient","uri","headers","Authorization","cache","InMemoryCache","Router","exact","path","component","Details","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f396067.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.9c0790b9.svg\";","const mainTheme = {\n  siteWidth: '1024px',\n\n  colorMain: '#3f51b5',\n  colorSecondary: '#F94983',\n\n  fontColorMain: '#000',\n  fontColorSecondary: '#fff',\n\n  fontSizeSmall: '14px',\n  fontSizeMedium: '16px',\n  fontSizeLarge: '20px',\n\n  fontWeightMedium: '500',\n  fontWeightBold: '700',\n}\n\nexport default mainTheme\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nconst Global = createGlobalStyle`\n  ${reset}\n\n  body {\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #EEE;\n    letter-spacing: 0.1px;\n    line-height: 1.6;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nexport default Global;\n","import styled from 'styled-components';\n\nconst Layout = styled.div`\n  box-shadow:\n    0 2px 4px -1px rgba(0,0,0,.2),\n    0 4px 5px 0 rgba(0,0,0,.14),\n    0 1px 10px 0 rgba(0,0,0,.12);\n  color: ${props => props.theme.fontColorMain};\n  padding: 1.5em;\n  max-width: 500px;\n  margin: 40px auto;\n  background: ${props => props.theme.fontColorSecondary};\n`\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: ${props => props.theme.siteWidth};\n  padding: 0 1.25em;\n  margin: 0 auto;\n`\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  background: ${props => props.theme.colorMain};\n  font-size: ${props => props.theme.fontSizeLarge};\n  min-height: 64px;\n  box-sizing: border-box;\n  padding: 1.25em;\n`\n\nexport const HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n","import styled from 'styled-components';\n\ninterface IProps {\n  centered?: boolean\n}\n\nexport const H1 = styled.h1`\n  font-weight: ${props => props.theme.fontWeightBold};\n  text-decoration: none;\n  color: ${props => props.theme.fontColorSecondary};\n`\n\nexport const H2 = styled.h2`\n  color: ${props => props.theme.colorMain};\n  text-align: ${(props: IProps) => props.centered ? 'center' : 'left'};\n  font-size: ${props => props.theme.fontSizeLarge};\n  font-weight: ${props => props.theme.fontWeightMedium};\n  border-bottom: 1px solid #E0E0E0;\n  padding-bottom: 16px;\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Container } from 'styles/grid';\nimport { Header, HeaderContainer } from './Header.styled';\nimport { H1 } from 'styles/typo';\n\nconst HeaderComponent = (): JSX.Element => (\n  <Header>\n    <Container>\n      <HeaderContainer>\n        <Link to=\"/\">\n          <H1>Github App</H1>\n        </Link>\n      </HeaderContainer>\n    </Container>\n  </Header>\n)\n\nexport default HeaderComponent\n","import { createStore } from 'reusable';\nimport { useState } from 'react';\nimport { get } from 'helpers/http';\n\nconst useGithub = createStore(() => {\n  const [searchName, setSearchName] = useState<any>([])\n\n  const search = async (search: string) => {\n    setSearchName(search)\n  }\n\n  return {\n    searchName,\n    search\n  }\n})\n\nexport default useGithub\n","import styled from 'styled-components';\n\ninterface IProps {\n  position?: string\n}\n\nexport const ButtonContainer = styled.div`\n  text-align: ${(props: IProps) => props.position || 'center'};\n`\n\nexport const PrimaryButton = styled.button`\n  box-shadow:\n    0 2px 2px 0 rgba(0,0,0,.14),\n    0 3px 1px -2px rgba(0,0,0,.2),\n    0 1px 5px 0 rgba(0,0,0,.12);\n  background: ${props => props.theme.colorSecondary};\n  color: ${props => props.theme.fontColorSecondary};\n  border: 0;\n  border-radius: 2px;\n  font-size: ${props => props.theme.fontSizeSmall};\n  padding: 6px 1em;\n  font-weight: ${props => props.theme.fontWeightBold};\n  margin: 1em 1.5em;\n`\n","import styled from 'styled-components';\n\nexport const InputRow = styled.div`\n  margin: 1em 0;\n`\n\nexport const Input = styled.input`\n  border: 0;\n  box-shadow: 0;\n  border-bottom: 1px solid ${props => props.theme.fontColorMain};\n  outline: none;\n  display: block;\n  width: 100%;\n  transition: border-bottom .3s ease;\n  padding-bottom: 2px;\n\n  &:focus {\n      border-bottom: 2px solid ${props => props.theme.colorMain};\n  }\n`\n\nexport const Label = styled.label`\n  color: ${props => props.theme.colorMain};\n  display: block;\n  font-size: 12px;\n  margin-bottom: .5em;\n  font-weight: ${props => props.theme.fontWeightMedium};\n`\n","import React from 'react'\nimport { useFormState } from 'react-use-form-state';\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport useGithub from 'hooks/useGithub';\n\n\nimport { PrimaryButton, ButtonContainer } from 'styles/buttons';\nimport { InputRow, Input, Label } from 'styles/form';\nimport { H2 } from 'styles/typo';\nimport { RESULTS_URL } from 'consts/urls'\n\nconst Search: React.FC<RouteComponentProps> = ({ history }): JSX.Element => {\n  const { search } = useGithub();\n  const [formState, { text }] = useFormState();\n\n  const onSubmit = async (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n    search(formState.values.query)\n    history.push('/results')\n  }\n\n  return (\n    <>\n      <H2> Github Search </H2>\n        <form onSubmit={onSubmit}>\n          <InputRow>\n            <Label> Repo name </Label>\n            <Input {...text('query')} required />\n          </InputRow>\n          <ButtonContainer>\n            <PrimaryButton type=\"submit\"> Search </PrimaryButton>\n          </ButtonContainer>\n      </form>\n    </>\n  )\n}\n\nexport default Search\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  text-decoration: none;\n  display: flex;\n  padding: 1em 0;\n`\n\nexport const Icon = styled.img`\n  display: block;\n  margin: auto;\n  width: 50px;\n`\n\nexport const Title = styled.h3`\n  font-size: ${props => props.theme.fontSizeLarge};\n  color: ${props => props.theme.fontColorMain};\n`\n\nexport const Description = styled.p`\n  font-size: ${props => props.theme.fontSizeSmall};\n  color: #666;\n  font-weight:  ${props => props.theme.fontWeightMedium};\n`\n\nexport const ListItemContainer = styled.div`\n  padding: 5px 0;\n  margin-left: 2em;\n  width: 80%;\n`\n\nexport const ListItemButton = styled.small`\n  float: right;\n  color: ${props => props.theme.fontColorMain};\n  font-size: ${props => props.theme.fontSizeSmall};\n  text-decoration: none;\n`\n","import styled from 'styled-components';\n\nexport const IconBack = styled.img`\n  float: left;\n`\n","import { gql } from 'apollo-boost';\n\nexport const SEARCH = gql`\n  query($name: String!){\n    search(query: $name, type: REPOSITORY, first: 10) {\n\n      repositoryCount\n      nodes {\n          ... on Repository {\n            id\n            name\n            stargazers {\n              totalCount\n            }\n            owner {\n              login\n              avatarUrl\n            }\n            primaryLanguage {\n              id\n              name\n            }\n            updatedAt\n          }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport useGithub from 'hooks/useGithub';\nimport { Link } from 'react-router-dom';\n\nimport { H2 } from 'styles/typo';\n\nimport { ListItem, ListItemContainer, Icon, Title, Description } from './Results.styled';\nimport { ButtonContainer, PrimaryButton } from 'styles/buttons';\nimport { IconBack } from 'styles/icons';\n\nimport ArrowIcon from 'assets/arrow.svg';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { SEARCH } from 'queries'\n\nimport { SEARCH_URL, DETAILS_URL } from 'consts/urls';\n\nconst Results = ({ history }): JSX.Element | null => {\n  const { searchName } = useGithub();\n  const { loading, error, data } = useQuery(SEARCH, {\n    variables: { name: searchName },\n  });\n\n  if(loading) return null;\n\n  if(error) {\n    history.push(SEARCH_URL);\n    return null;\n  }\n\n  const { search: { nodes } } = data\n\n  return (\n    <>\n      <H2 centered>\n        Github Repos\n        <Link to={SEARCH_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n      </H2>\n      <ul>\n        {\n          nodes.map(({ id, name, primaryLanguage, owner, stargazers }) => (\n            <ListItem key={id}>\n              <Icon src={owner.avatarUrl} alt=\"Recipe\"/>\n              <ListItemContainer>\n                <Title>{name} ({owner.login}) ({stargazers.totalCount} stars)</Title>\n                <Description>\n                  {primaryLanguage && `#${primaryLanguage.name}`}\n                </Description>\n                <ButtonContainer position=\"right\">\n                  <Link to={`${DETAILS_URL}/${id}`}>\n                    <PrimaryButton> Show more </PrimaryButton>\n                  </Link>\n                </ButtonContainer>\n              </ListItemContainer>\n            </ListItem>\n          ))\n        }\n      </ul>\n    </>\n  )\n}\n\nexport default Results\n","export const SEARCH_URL: string = '/';\nexport const RESULTS_URL: string = '/results';\nexport const DETAILS_URL: string = '/details';\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nimport { H2 } from 'styles/typo';\nimport { IconBack } from 'styles/icons';\n\nimport ArrowIcon from 'assets/arrow.svg';\nimport { RESULTS_URL } from 'consts/urls';\n\nconst Detail = (): JSX.Element => {\n  return <>\n    <H2 centered>\n      Repo Detail\n      <Link to={RESULTS_URL}><IconBack src={ArrowIcon} alt=\"Back\" /></Link>\n    </H2>\n    <p>elo</p>\n  </>\n}\n\nexport default Detail;\n","import React from 'react';\nimport {\n\tHashRouter,\n\tRoute,\n\tSwitch\n} from 'react-router-dom';\nimport { ReusableProvider } from 'reusable';\nimport { ThemeProvider } from 'styled-components';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport theme from 'styles/theme';\nimport Global from 'styles/global';\nimport Layout from 'styles/layout';\n\n\nimport Header from 'common/Header';\n\nimport Search from 'pages/Search';\nimport Results from 'pages/Results';\nimport Details from 'pages/Details';\n\n\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: 'Bearer b387837b296d38b818632020410f1752fe818b2c'\n  },\n  cache: new InMemoryCache()\n});\n\n\n\nconst Router: React.FC = () => (\n  <HashRouter>\n    <ThemeProvider theme={theme}>\n      <ReusableProvider>\n        <ApolloProvider client={client}>\n          <Header />\n          <Layout>\n            <Switch>\n              <Route exact path=\"/\" component={Search} />\n              <Route path=\"/results\" component={Results} />\n              <Route path=\"/details/:id\" component={Details} />\n            </Switch>\n          </Layout>\n          <Global />\n        </ApolloProvider>\n      </ReusableProvider>\n    </ThemeProvider>\n  </HashRouter>\n)\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}